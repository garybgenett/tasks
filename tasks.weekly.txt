###[ Weekly Review Steps & Commands ]###

#[ Markdown Source ]
#]#### System
#]
#]  * Strategic
#]    * [Goals (.review)](#goals)
#]    * [Roadmap (.status)](#roadmap)
#]    * [Timeline (tasks.timeline.html)](tasks.timeline.html)
#]    * [Plan (.today)](#plan)
#]    * [Sales (zoho.today.md)](zoho.today.md)
#]  * Tactical
#]    * [Journal (.legend)](#uuid-34082cc8-bf70-41e4-b3de-d60f94586ced)
#]    * [Family & Friends](#uuid-7327628e-c2e8-4b08-b691-e64e4731b17b)
#]    * [Sales Data (zoho.all.md)](zoho.all.md)
#]  * Sources
#]    * Thoughts
#]    * Digital
#]        * [Notes](https://drive.google.com/file/d/1asjTujzIRYBiqvXdBG34RD_fCN7GQN5e) ([_notes.txt](https://drivenotepad.github.io/app/?state={"action":"open","ids":["1asjTujzIRYBiqvXdBG34RD_fCN7GQN5e"]}))
#]        * [Tasks](https://mail.google.com/tasks/canvas) (+Inbox, '.in')
#]        * [Drive](https://drive.google.com/drive/my-drive)
#]        * [Share](https://drive.google.com/drive/shared-with-me)
#]    * Analog
#]        * Wallet
#]        * Binder
#]        * Folders
#]  * Tools
#]    * Calendar
#]        * Past, for missed
#]        * Future, for upcoming
#]    * Taskwarrior
#]    * Phone
#]        * Review ('android.txt')
#]        * Backup
#]            * Rsync ('android.txt -b')
#]            * SMS Backup
#]        * Voicemails
#]        * Texts
#]    * Computer
#]        * Browser
#]        * Email

#[ _task_parse_cmd :: impersonate_command ]

#[ _task_parse_cmd_bash :: bash]

#[ Markdown Source ]
#]#### Weekly Review
#]
#]  * [System](#system)
#]  * Taskwarrior ('.view')
#]    * Reminders (`calendar`, `mind`)
#]        * Past, for missed
#]        * Future, for upcoming
#]    * Todos (`todo`)
#]        * GTD (`read status:pending project:.gtd`)
#]        * Research (`read status:pending tags:.research`)
#]        * Waiting (`read status:pending tags:.waiting`)
#]    * Projects (`projects`)
#]        * Active (`projects status:pending`)
#]        * Iterate (`+ACTIVE; for FILE in $(task status:pending _unique project | grep -E -v "^[._]" | sort | uniq); do task read project:${FILE} project.not:${FILE}.; task-depends project:${FILE} project.not:${FILE}.; done`)
#]    * Tasks (`read status:pending project:`, `+ACTIVE; task-depends status:pending project:`)
#]        * UDAs (`udas`)
#]            * Kinds (`+ACTIVE; for FILE in $(task status:pending _unique kind | grep -E -v "^[._]" | cut -d. -f1 | sort | uniq); do task read status:pending kind:${FILE}; done`)
#]            * Areas (`+ACTIVE; for FILE in $(task status:pending _unique area | grep -E -v "^[._]" | cut -d. -f1 | sort | uniq); do task read status:pending area:${FILE}; done`)
#]        * Tags (`tags`)
#]            * Active (`tags status:pending`)
#]            * Iterate (`+ACTIVE; for FILE in $(task status:pending _unique tags | grep -E -v "^[._]" | sort | uniq); do task read status:pending tags:${FILE}; done`)
#]    * Someday (`read project:.someday`)
#]    * Verify
#]        * Overview (`fail`, `data`, `meta status:pending`)
#]        * Recurring (`read status:recurring`, `+ACTIVE; task-recur status:recurring`, `+ACTIVE; task-recur status.not:recurring`)
#]    * Report (`.repo`)

#[ _task_parse_cmd :: impersonate_command ]
#|calendar
#|mind
#|todo
#|read status:pending project:.gtd
#|read status:pending tags:.research
#|read status:pending tags:.waiting
#|projects
#|projects status:pending
#|+ACTIVE; for FILE in $(task status:pending _unique project | grep -E -v "^[._]" | sort | uniq); do task read project:${FILE} project.not:${FILE}.; task-depends project:${FILE} project.not:${FILE}.; done
#|read status:pending project:
#|+ACTIVE; task-depends status:pending project:
#|udas
#|+ACTIVE; for FILE in $(task status:pending _unique kind | grep -E -v "^[._]" | cut -d. -f1 | sort | uniq); do task read status:pending kind:${FILE}; done
#|+ACTIVE; for FILE in $(task status:pending _unique area | grep -E -v "^[._]" | cut -d. -f1 | sort | uniq); do task read status:pending area:${FILE}; done
#|tags
#|tags status:pending
#|+ACTIVE; for FILE in $(task status:pending _unique tags | grep -E -v "^[._]" | sort | uniq); do task read status:pending tags:${FILE}; done
#|read project:.someday
#|fail
#|data
#|meta status:pending
#|read status:recurring
#|+ACTIVE; task-recur status:recurring
#|+ACTIVE; task-recur status.not:recurring
#|.repo

#[ _task_parse_cmd_bash :: bash]
task calendar;
task mind;
task todo;
task read status:pending project:.gtd;
task read status:pending tags:.research;
task read status:pending tags:.waiting;
task projects;
task projects status:pending;
for FILE in $(task status:pending _unique project | grep -E -v "^[._]" | sort | uniq); do task read project:${FILE} project.not:${FILE}.; IMPERSONATE_NAME=task .bashrc task-depends project:${FILE} project.not:${FILE}.; done;
task read status:pending project:;
eval ${MARKER}; IMPERSONATE_NAME=task .bashrc task-depends status:pending project:;
task udas;
for FILE in $(task status:pending _unique kind | grep -E -v "^[._]" | cut -d. -f1 | sort | uniq); do task read status:pending kind:${FILE}; done;
for FILE in $(task status:pending _unique area | grep -E -v "^[._]" | cut -d. -f1 | sort | uniq); do task read status:pending area:${FILE}; done;
task tags;
task tags status:pending;
for FILE in $(task status:pending _unique tags | grep -E -v "^[._]" | sort | uniq); do task read status:pending tags:${FILE}; done;
task read project:.someday;
task fail;
task data;
task meta status:pending;
task read status:recurring;
eval ${MARKER}; IMPERSONATE_NAME=task .bashrc task-recur status:recurring;
eval ${MARKER}; IMPERSONATE_NAME=task .bashrc task-recur status.not:recurring;
eval ${MARKER}; IMPERSONATE_NAME=task .bashrc impersonate_command repo;

#[ Markdown Source ]
#]#### Weekly Report
#]
#]  * Taskwarrior ('.repo')
#]    * Integrity (`diagnostics`)
#]    * Projects (`summary`)
#]    * History
#]        * Numerical (`rc.defaultwidth=120 history.monthly`)
#]        * Graphical (`rc.defaultwidth=120 ghistory.monthly`)
#]    * Trending
#]        * Weekly (`rc.defaultwidth=120 rc.defaultheight=40 burndown.weekly`)
#]        * Daily (`rc.defaultwidth=120 rc.defaultheight=40 burndown.daily`)
#]    * Activity
#]        * Custom (`+ACTIVE; SINCE="$(date --date="@$(calc $(date +%s)-$(calc 60*60*24*7))" --iso=s)"; task sort rc.color.completed=green rc.color.deleted=red \( \( end.after:${SINCE} \) or \( modified.after:${SINCE} kind.any: \) \)`)
#]        * Default (`timesheet 2`)
#]    * Statistics (`stats`)

#[ _task_parse_cmd :: impersonate_command ]
#|diagnostics
#|summary
#|rc.defaultwidth=120 history.monthly
#|rc.defaultwidth=120 ghistory.monthly
#|rc.defaultwidth=120 rc.defaultheight=40 burndown.weekly
#|rc.defaultwidth=120 rc.defaultheight=40 burndown.daily
#|+ACTIVE; SINCE="$(date --date="@$(calc $(date +%s)-$(calc 60*60*24*7))" --iso=s)"; task sort rc.color.completed=green rc.color.deleted=red \( \( end.after:${SINCE} \) or \( modified.after:${SINCE} kind.any: \) \)
#|timesheet 2
#|stats

#[ _task_parse_cmd_bash :: bash]
task diagnostics;
task summary;
task rc.defaultwidth=120 history.monthly;
task rc.defaultwidth=120 ghistory.monthly;
task rc.defaultwidth=120 rc.defaultheight=40 burndown.weekly;
task rc.defaultwidth=120 rc.defaultheight=40 burndown.daily;
SINCE="$(date --date="@$(calc $(date +%s)-$(calc 60*60*24*7))" --iso=s)"; task sort rc.color.completed=green rc.color.deleted=red \( \( end.after:${SINCE} \) or \( modified.after:${SINCE} kind.any: \) \);
task timesheet 2;
task stats;
