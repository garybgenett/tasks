###[ Weekly Review Steps & Commands ]###

#[ Markdown Source ]
#]### Weekly Review
#]
#]  * Thoughts
#]  * Queues
#]    * Inbox (`.in`)
#]    * Notepad
#]    * Paperwork
#]    * Browser
#]    * Email
#]    * Phone
#]        * Voicemails
#]        * Texts
#]    * Calendar
#]        * Past, for missed
#]        * Future, for upcoming
#]  * System (`.view`)
#]    * Reminders (`calendar rc.calendar.offset.value=-2 rc.monthsperline=6 rc.calendar.holidays=full rc.calendar.details=full`, `mind`)
#]        * Past, for missed
#]        * Future, for upcoming
#]    * Todos (`todo`)
#]    * Research (`read status:pending tag:.research`)
#]    * Waiting (`read status:pending tag:.waiting`)
#]    * Projects
#]        * All (`projects`)
#]        * Active (`projects status:pending`)
#]        * Iterate (`+ACTIVE; for FILE in $(task _unique project status:pending | grep -E -v "^[._]" | cut -d. -f1 | sort | uniq); do task read project:${FILE}; done`)
#]    * Tasks (`read status:pending project:`)
#]        * UDAs
#]            * All (`udas`)
#]            * Kinds (`+ACTIVE; for FILE in $(task _unique kind status:pending | grep -E -v "^[._]" | cut -d. -f1 | sort | uniq); do task read status:pending kind:${FILE}; done`)
#]            * Areas (`+ACTIVE; for FILE in $(task _unique area status:pending | grep -E -v "^[._]" | cut -d. -f1 | sort | uniq); do task read status:pending area:${FILE}; done`)
#]        * Tags
#]            * All (`tags`)
#]            * Active (`tags status:pending`)
#]            * Iterate (`+ACTIVE; for FILE in $(task _unique tags status:pending); do task read status:pending tag:${FILE}; done`)
#]    * Someday (`read project:.someday`)
#]    * Verify (`fail`, `data`, `meta status:pending`, `+ACTIVE; task-recur status:recurring`, `+ACTIVE; task-recur status.not:recurring`)
#]    * Report (`.repo`)

#[ _task_parse_cmd :: impersonate_command ]
#|.in
#|.view
#|calendar rc.calendar.offset.value=-2 rc.monthsperline=6 rc.calendar.holidays=full rc.calendar.details=full
#|mind
#|todo
#|read status:pending tag:.research
#|read status:pending tag:.waiting
#|projects
#|projects status:pending
#|+ACTIVE; for FILE in $(task _unique project status:pending | grep -E -v "^[._]" | cut -d. -f1 | sort | uniq); do task read project:${FILE}; done
#|read status:pending project:
#|udas
#|+ACTIVE; for FILE in $(task _unique kind status:pending | grep -E -v "^[._]" | cut -d. -f1 | sort | uniq); do task read status:pending kind:${FILE}; done
#|+ACTIVE; for FILE in $(task _unique area status:pending | grep -E -v "^[._]" | cut -d. -f1 | sort | uniq); do task read status:pending area:${FILE}; done
#|tags
#|tags status:pending
#|+ACTIVE; for FILE in $(task _unique tags status:pending); do task read status:pending tag:${FILE}; done
#|read project:.someday
#|fail
#|data
#|meta status:pending
#|+ACTIVE; task-recur status:recurring
#|+ACTIVE; task-recur status.not:recurring
#|.repo

#[ _task_parse_cmd_bash :: bash]
task calendar rc.calendar.offset.value=-2 rc.monthsperline=6 rc.calendar.holidays=full rc.calendar.details=full;
task mind;
task todo;
task read status:pending tag:.research;
task read status:pending tag:.waiting;
task projects;
task projects status:pending;
for FILE in $(task _unique project status:pending | grep -E -v "^[._]" | cut -d. -f1 | sort | uniq); do task read project:${FILE}; done;
task read status:pending project:;
task udas;
for FILE in $(task _unique kind status:pending | grep -E -v "^[._]" | cut -d. -f1 | sort | uniq); do task read status:pending kind:${FILE}; done;
for FILE in $(task _unique area status:pending | grep -E -v "^[._]" | cut -d. -f1 | sort | uniq); do task read status:pending area:${FILE}; done;
task tags;
task tags status:pending;
for FILE in $(task _unique tags status:pending); do task read status:pending tag:${FILE}; done;
task read project:.someday;
task fail;
task data;
task meta status:pending;
eval ${MARKER}; task-recur status:recurring;
eval ${MARKER}; task-recur status.not:recurring;
eval ${MARKER}; impersonate_command repo;

#[ Markdown Source ]
#]### Weekly Report
#]
#]  * Integrity (`diagnostics`)
#]  * Projects (`summary`)
#]  * History
#]    * Numerical (`rc.defaultwidth=120 rc.defaultheight=40 history.monthly`)
#]    * Graphical (`rc.defaultwidth=120 rc.defaultheight=40 ghistory.monthly`)
#]  * Trending
#]    * Weekly (`rc.defaultwidth=120 rc.defaultheight=40 burndown.weekly`)
#]    * Daily (`rc.defaultwidth=120 rc.defaultheight=40 burndown.daily`)
#]  * Activity
#]    * Custom (`+ACTIVE; SINCE="$(date --date="@$(calc $(date +%s)-$(calc 60*60*24*7))" --iso=s)"; task sort rc.color.completed=green rc.color.deleted=red \( \( end.after:${SINCE} \) or \( modified.after:${SINCE} kind.any: \) \)`)
#]    * Default (`timesheet 2`)
#]  * Statistics (`stats`)

#[ _task_parse_cmd :: impersonate_command ]
#|diagnostics
#|summary
#|rc.defaultwidth=120 rc.defaultheight=40 history.monthly
#|rc.defaultwidth=120 rc.defaultheight=40 ghistory.monthly
#|rc.defaultwidth=120 rc.defaultheight=40 burndown.weekly
#|rc.defaultwidth=120 rc.defaultheight=40 burndown.daily
#|+ACTIVE; SINCE="$(date --date="@$(calc $(date +%s)-$(calc 60*60*24*7))" --iso=s)"; task sort rc.color.completed=green rc.color.deleted=red \( \( end.after:${SINCE} \) or \( modified.after:${SINCE} kind.any: \) \)
#|timesheet 2
#|stats

#[ _task_parse_cmd_bash :: bash]
task diagnostics;
task summary;
task rc.defaultwidth=120 rc.defaultheight=40 history.monthly;
task rc.defaultwidth=120 rc.defaultheight=40 ghistory.monthly;
task rc.defaultwidth=120 rc.defaultheight=40 burndown.weekly;
task rc.defaultwidth=120 rc.defaultheight=40 burndown.daily;
SINCE="$(date --date="@$(calc $(date +%s)-$(calc 60*60*24*7))" --iso=s)"; task sort rc.color.completed=green rc.color.deleted=red \( \( end.after:${SINCE} \) or \( modified.after:${SINCE} kind.any: \) \);
task timesheet 2;
task stats;
