###[ Weekly Review Steps & Commands ]###

#[ Markdown Source ]
#]#### Weekly Review
#]
#]  * [System](#system)
#]  * Taskwarrior ('.view')
#]    * Reminders (`calendar`, `mind`)
#]        * Past, for missed
#]        * Future, for upcoming
#]    * Todos (`todo`)
#]        * Overview (`fail`, `data`, `meta status:pending`)
#]        * Recurring (`read status:recurring`, `+task-recur status:recurring`, `read status.isnt:recurring mask.any:`, `+task-recur status.isnt:recurring mask.any:`)
#]    * Projects (`projects`)
#]        * Active (`projects status:pending`)
#]        * Iterate (`+for FILE in $(task status:pending _unique project); do task read project.is:${FILE} -PARENT -CHILD; task-depends -r project.is:${FILE} -PARENT -CHILD; done`)
#]    * Tasks (`view status:pending project.none:; task-depends -r status:pending project.none:`)
#]        * UDAs (`udas`)
#]            * Kinds (`+for FILE in $(task status:pending _unique kind); do task read status:pending kind.is:${FILE}; done`)
#]            * Areas (`+for FILE in $(task status:pending _unique area); do task tags status:pending area.is:${FILE}; task read status:pending area.is:${FILE}; done`)
#]        * Tags (`tags`)
#]            * Active (`tags status:pending`)
#]            * Iterate (`+for FILE in $(task status:pending _unique tags); do task read status:pending tags.is:${FILE}; done`)
#]    * Report (`.repo`)

#[ _task_parse_cmd :: impersonate_command ]
#|calendar
#|mind
#|todo
#|fail
#|data
#|meta status:pending
#|read status:recurring
#|+task-recur status:recurring
#|read status.isnt:recurring mask.any:
#|+task-recur status.isnt:recurring mask.any:
#|projects
#|projects status:pending
#|+for FILE in $(task status:pending _unique project); do task read project.is:${FILE} -PARENT -CHILD; task-depends -r project.is:${FILE} -PARENT -CHILD; done
#|view status:pending project.none:; task-depends -r status:pending project.none:
#|udas
#|+for FILE in $(task status:pending _unique kind); do task read status:pending kind.is:${FILE}; done
#|+for FILE in $(task status:pending _unique area); do task tags status:pending area.is:${FILE}; task read status:pending area.is:${FILE}; done
#|tags
#|tags status:pending
#|+for FILE in $(task status:pending _unique tags); do task read status:pending tags.is:${FILE}; done
#|.repo

#[ _task_parse_cmd_bash :: bash]
task calendar;
task mind;
task todo;
task fail;
task data;
task meta status:pending;
task read status:recurring;
eval ${MARKER}; IMPERSONATE_NAME=task .bashrc task-recur status:recurring;
task read status.isnt:recurring mask.any:;
eval ${MARKER}; IMPERSONATE_NAME=task .bashrc task-recur status.isnt:recurring mask.any:;
task projects;
task projects status:pending;
for FILE in $(task status:pending _unique project); do task read project.is:${FILE} -PARENT -CHILD; eval ${MARKER}; IMPERSONATE_NAME=task .bashrc task-depends -r project.is:${FILE} -PARENT -CHILD; done;
task view status:pending project.none:; eval ${MARKER}; IMPERSONATE_NAME=task .bashrc task-depends -r status:pending project.none:;
task udas;
for FILE in $(task status:pending _unique kind); do task read status:pending kind.is:${FILE}; done;
for FILE in $(task status:pending _unique area); do task tags status:pending area.is:${FILE}; task read status:pending area.is:${FILE}; done;
task tags;
task tags status:pending;
for FILE in $(task status:pending _unique tags); do task read status:pending tags.is:${FILE}; done;
eval ${MARKER}; IMPERSONATE_NAME=task .bashrc impersonate_command repo;

#[ Markdown Source ]
#]#### Weekly Report
#]
#]  * Taskwarrior ('.repo')
#]    * Integrity (`diagnostics`)
#]    * Projects (`summary`)
#]    * History
#]        * Numerical (`rc.defaultwidth=120 history.monthly`)
#]        * Graphical (`rc.defaultwidth=120 ghistory.monthly`)
#]    * Trending
#]        * Weekly (`rc.defaultwidth=120 rc.defaultheight=40 burndown.weekly`)
#]        * Daily (`rc.defaultwidth=120 rc.defaultheight=40 burndown.daily`)
#]    * Activity
#]        * Custom (`+SINCE="$(date --date="@$(calc $(date +%s)-$(calc 60*60*24*7))" --iso=s)"; task sort rc.color.completed=green rc.color.deleted=red \( \( end.after:${SINCE} \) or \( modified.after:${SINCE} kind.any: \) \)`)
#]        * Default (`timesheet 2`)
#]    * Statistics (`stats`)

#[ _task_parse_cmd :: impersonate_command ]
#|diagnostics
#|summary
#|rc.defaultwidth=120 history.monthly
#|rc.defaultwidth=120 ghistory.monthly
#|rc.defaultwidth=120 rc.defaultheight=40 burndown.weekly
#|rc.defaultwidth=120 rc.defaultheight=40 burndown.daily
#|+SINCE="$(date --date="@$(calc $(date +%s)-$(calc 60*60*24*7))" --iso=s)"; task sort rc.color.completed=green rc.color.deleted=red \( \( end.after:${SINCE} \) or \( modified.after:${SINCE} kind.any: \) \)
#|timesheet 2
#|stats

#[ _task_parse_cmd_bash :: bash]
task diagnostics;
task summary;
task rc.defaultwidth=120 history.monthly;
task rc.defaultwidth=120 ghistory.monthly;
task rc.defaultwidth=120 rc.defaultheight=40 burndown.weekly;
task rc.defaultwidth=120 rc.defaultheight=40 burndown.daily;
SINCE="$(date --date="@$(calc $(date +%s)-$(calc 60*60*24*7))" --iso=s)"; task sort rc.color.completed=green rc.color.deleted=red \( \( end.after:${SINCE} \) or \( modified.after:${SINCE} kind.any: \) \);
task timesheet 2;
task stats;
